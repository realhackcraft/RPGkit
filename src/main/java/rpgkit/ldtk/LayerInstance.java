package rpgkit.ldtk;

import com.fasterxml.jackson.annotation.*;

public class LayerInstance {
    private long cHei;
    private long cWid;
    private long gridSize;
    private String identifier;
    private double opacity;
    private long pxTotalOffsetX;
    private long pxTotalOffsetY;
    private Long tilesetDefUid;
    private String tilesetRelPath;
    private String type;
    private TileInstance[] autoLayerTiles;
    private EntityInstance[] entityInstances;
    private TileInstance[] gridTiles;
    private String iid;
    private IntGridValueInstance[] intGrid;
    private long[] intGridCSV;
    private long layerDefUid;
    private long levelID;
    private long[] optionalRules;
    private Long overrideTilesetUid;
    private long pxOffsetX;
    private long pxOffsetY;
    private long seed;
    private boolean visible;

    /**
     * Grid-based height
     */
    @JsonProperty("__cHei")
    public long getCHei() { return cHei; }
    @JsonProperty("__cHei")
    public void setCHei(long value) { this.cHei = value; }

    /**
     * Grid-based width
     */
    @JsonProperty("__cWid")
    public long getCWid() { return cWid; }
    @JsonProperty("__cWid")
    public void setCWid(long value) { this.cWid = value; }

    /**
     * Grid size
     */
    @JsonProperty("__gridSize")
    public long getGridSize() { return gridSize; }
    @JsonProperty("__gridSize")
    public void setGridSize(long value) { this.gridSize = value; }

    /**
     * Layer definition identifier
     */
    @JsonProperty("__identifier")
    public String getIdentifier() { return identifier; }
    @JsonProperty("__identifier")
    public void setIdentifier(String value) { this.identifier = value; }

    /**
     * Layer opacity as Float [0-1]
     */
    @JsonProperty("__opacity")
    public double getOpacity() { return opacity; }
    @JsonProperty("__opacity")
    public void setOpacity(double value) { this.opacity = value; }

    /**
     * Total layer X pixel offset, including both instance and definition offsets.
     */
    @JsonProperty("__pxTotalOffsetX")
    public long getPxTotalOffsetX() { return pxTotalOffsetX; }
    @JsonProperty("__pxTotalOffsetX")
    public void setPxTotalOffsetX(long value) { this.pxTotalOffsetX = value; }

    /**
     * Total layer Y pixel offset, including both instance and definition offsets.
     */
    @JsonProperty("__pxTotalOffsetY")
    public long getPxTotalOffsetY() { return pxTotalOffsetY; }
    @JsonProperty("__pxTotalOffsetY")
    public void setPxTotalOffsetY(long value) { this.pxTotalOffsetY = value; }

    /**
     * The definition UID of corresponding Tileset, if any.
     */
    @JsonProperty("__tilesetDefUid")
    public Long getTilesetDefUid() { return tilesetDefUid; }
    @JsonProperty("__tilesetDefUid")
    public void setTilesetDefUid(Long value) { this.tilesetDefUid = value; }

    /**
     * The relative path to corresponding Tileset, if any.
     */
    @JsonProperty("__tilesetRelPath")
    public String getTilesetRelPath() { return tilesetRelPath; }
    @JsonProperty("__tilesetRelPath")
    public void setTilesetRelPath(String value) { this.tilesetRelPath = value; }

    /**
     * Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer)
     */
    @JsonProperty("__type")
    public String getType() { return type; }
    @JsonProperty("__type")
    public void setType(String value) { this.type = value; }

    /**
     * An array containing all tiles generated by Auto-layer rules. The array is already sorted
     * in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.).<br/><br/>
     * Note: if multiple tiles are stacked in the same cell as the result of different rules,
     * all tiles behind opaque ones will be discarded.
     */
    @JsonProperty("autoLayerTiles")
    public TileInstance[] getAutoLayerTiles() { return autoLayerTiles; }
    @JsonProperty("autoLayerTiles")
    public void setAutoLayerTiles(TileInstance[] value) { this.autoLayerTiles = value; }

    @JsonProperty("entityInstances")
    public EntityInstance[] getEntityInstances() { return entityInstances; }
    @JsonProperty("entityInstances")
    public void setEntityInstances(EntityInstance[] value) { this.entityInstances = value; }

    @JsonProperty("gridTiles")
    public TileInstance[] getGridTiles() { return gridTiles; }
    @JsonProperty("gridTiles")
    public void setGridTiles(TileInstance[] value) { this.gridTiles = value; }

    /**
     * Unique layer instance identifier
     */
    @JsonProperty("iid")
    public String getIid() { return iid; }
    @JsonProperty("iid")
    public void setIid(String value) { this.iid = value; }

    /**
     * **WARNING**: this deprecated value is no longer exported since version 1.0.0  Replaced
     * by: `intGridCsv`
     */
    @JsonProperty("intGrid")
    public IntGridValueInstance[] getIntGrid() { return intGrid; }
    @JsonProperty("intGrid")
    public void setIntGrid(IntGridValueInstance[] value) { this.intGrid = value; }

    /**
     * A list of all values in the IntGrid layer, stored in CSV format (Comma Separated
     * Values).<br/>  Order is from left to right, and top to bottom (ie. first row from left to
     * right, followed by second row, etc).<br/>  `0` means "empty cell" and IntGrid values
     * start at 1.<br/>  The array size is `__cWid` x `__cHei` cells.
     */
    @JsonProperty("intGridCsv")
    public long[] getIntGridCSV() { return intGridCSV; }
    @JsonProperty("intGridCsv")
    public void setIntGridCSV(long[] value) { this.intGridCSV = value; }

    /**
     * Reference the Layer definition UID
     */
    @JsonProperty("layerDefUid")
    public long getLayerDefUid() { return layerDefUid; }
    @JsonProperty("layerDefUid")
    public void setLayerDefUid(long value) { this.layerDefUid = value; }

    /**
     * Reference to the UID of the level containing this layer instance
     */
    @JsonProperty("levelId")
    public long getLevelID() { return levelID; }
    @JsonProperty("levelId")
    public void setLevelID(long value) { this.levelID = value; }

    /**
     * An Array containing the UIDs of optional rules that were enabled in this specific layer
     * instance.
     */
    @JsonProperty("optionalRules")
    public long[] getOptionalRules() { return optionalRules; }
    @JsonProperty("optionalRules")
    public void setOptionalRules(long[] value) { this.optionalRules = value; }

    /**
     * This layer can use another tileset by overriding the tileset UID here.
     */
    @JsonProperty("overrideTilesetUid")
    public Long getOverrideTilesetUid() { return overrideTilesetUid; }
    @JsonProperty("overrideTilesetUid")
    public void setOverrideTilesetUid(Long value) { this.overrideTilesetUid = value; }

    /**
     * X offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to
     * the `LayerDef` optional offset, so you should probably prefer using `__pxTotalOffsetX`
     * which contains the total offset value)
     */
    @JsonProperty("pxOffsetX")
    public long getPxOffsetX() { return pxOffsetX; }
    @JsonProperty("pxOffsetX")
    public void setPxOffsetX(long value) { this.pxOffsetX = value; }

    /**
     * Y offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to
     * the `LayerDef` optional offset, so you should probably prefer using `__pxTotalOffsetX`
     * which contains the total offset value)
     */
    @JsonProperty("pxOffsetY")
    public long getPxOffsetY() { return pxOffsetY; }
    @JsonProperty("pxOffsetY")
    public void setPxOffsetY(long value) { this.pxOffsetY = value; }

    /**
     * Random seed used for Auto-Layers rendering
     */
    @JsonProperty("seed")
    public long getSeed() { return seed; }
    @JsonProperty("seed")
    public void setSeed(long value) { this.seed = value; }

    /**
     * Layer instance visibility
     */
    @JsonProperty("visible")
    public boolean getVisible() { return visible; }
    @JsonProperty("visible")
    public void setVisible(boolean value) { this.visible = value; }
}
